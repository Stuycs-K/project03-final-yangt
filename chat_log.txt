[00:56:06] You: hi
[00:56:06] You: hi
[00:56:10] You: iofuhiouefgouiewaopioa
[00:56:10] You: iofuhiouefgouiewaopioa
[00:56:19] You: onmg
[00:56:19] You: onmg
[00:56:23] You: doers thewg 
[00:56:23] You: doers thewg 
[00:56:28] You: 
[00:56:28] You: 
[00:56:28] You: 
[00:56:28] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:29] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:30] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:56:31] You: 
[00:58:11] You: wha
[00:58:11] You: wha
[00:58:14] You: LMAO
[00:58:14] You: LMAO
[00:58:26] You: hi idk fdeuiahsfgiueg
[00:58:26] You: hi idk fdeuiahsfgiueg
[00:58:31] You: 
[00:58:31] You: 
[00:58:32] You: 
[00:58:32] You: 
[00:58:32] You: 
[00:58:32] You: 
[00:58:37] You: oh it doesn't uopdate3
[00:58:37] You: oh it doesn't uopdate3
[00:58:38] You: sad
[00:58:38] You: sad
[00:58:40] You: sad
[00:58:40] You: sad
[00:58:42] You: 
[00:58:42] You: 
[00:58:42] You: 
[00:58:42] You: 
[00:58:42] You: 
[00:58:42] You: 
[00:58:42] You: 
[00:58:42] You: 
[00:58:43] You: 
[00:58:43] You: 
[00:58:45] You: dafewgil
[00:58:45] You: dafewgil
[00:58:46] You: ewgj
[00:58:46] You: ewgj
[00:58:47] You: poijopewgiopewitg
[00:58:47] You: poijopewgiopewitg
[00:58:48] You: 
[00:58:48] You: 
[00:58:48] You: 
[00:58:48] You: 
[00:58:48] You: 
[00:58:48] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:49] You: 
[00:58:56] You: [B[B[B[A[Agrsiguj\
[00:58:56] You: [B[B[B[A[Agrsiguj\
[00:58:56] You: 
[00:58:56] You: 
[00:58:57] You: rseiogujpor
[00:58:57] You: rseiogujpor
[00:59:01] You: thsrdjhsrtu
[00:59:01] You: thsrdjhsrtu
[00:59:02] You: 
[00:59:02] You: 
[00:59:03] You: 
[00:59:03] You: 
[00:59:03] You: 
[00:59:03] You: 
[00:59:09] You: jtrsdjydjytuk
[00:59:09] You: jtrsdjydjytuk
[00:59:11] You: uiuigugp
[00:59:11] You: uiuigugp
[00:59:14] You: uigguiuig
[00:59:14] You: uigguiuig
[00:59:17] You: yufoyt8p
[00:59:17] You: yufoyt8p
[00:59:21] You: iugp
[00:59:21] You: iugp
[00:59:23] You: guipui
[00:59:23] You: guipui
[00:59:24] You: 
[00:59:24] You: 
[00:59:24] You: 
[00:59:24] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:25] You: 
[00:59:30] You: [B[B[B[B[A[A[A[A\
[00:59:30] You: [B[B[B[B[A[A[A[A\
[00:59:36] You: abc
[00:59:36] You: abc
[00:59:37] You: 
[00:59:37] You: 
[00:59:37] You: 
[00:59:37] You: 
[00:59:37] You: 
[00:59:37] You: 
[00:59:43] You: [C[C[C
[00:59:43] You: [C[C[C
[00:59:44] You: 
[00:59:44] You: 
[00:59:44] You: 
[00:59:44] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:45] You: 
[00:59:46] You: 
[00:59:46] You: 
[00:59:49] You: abc
[00:59:49] You: abc
[00:59:53] You: 123
[00:59:53] You: 123
[00:59:58] You: 
[00:59:58] You: 
[00:59:59] You: 
[00:59:59] You: 
[00:59:59] You: 
[00:59:59] You: 
[01:00:04] You: drsgedhasrtj
[01:00:04] You: drsgedhasrtj
[01:00:10] You: uyfo
[01:00:10] You: uyfo
[01:00:12] You: 
[01:00:12] You: 
[01:00:13] You: 
[01:00:13] You: 
[01:00:14] You: 
[01:00:14] You: 
[01:00:14] You: 
[01:00:14] You: 
[01:00:15] You: 
[01:00:15] You: 
[01:00:15] You: 
[01:00:15] You: 
[01:00:15] You: 
[01:00:15] You: 
[01:00:19] You: uyfoy
[01:00:19] You: uyfoy
[01:00:22] You: hiop;
[01:00:22] You: hiop;
[20:04:46] You: ridofpckdlf
[20:04:46] You: ridofpckdlf
[20:04:50] You: 
[20:04:50] You: 
[20:04:57] You: rwriopeiafopwe
[20:04:57] You: rwriopeiafopwe
[20:04:58] You: weiotuopw
[20:04:58] You: weiotuopw
[20:05:01] You: ah
[20:05:01] You: ah
[20:05:06] You: 
[20:05:06] You: 
[20:05:07] You: ah
[20:05:07] You: ah
[20:05:22] You: [B[B[B[B[B[B[B[B[B[A[A[A[A[B[B[A[B[A[B[A[B[B[A[B[A[B[A[B[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[A[B
[20:05:22] You: [B[B[B[B[B[B[B[B[B[A[A[A[A[B[B[A[B[A[B[A[B[B[A[B[A[B[A[B[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[B[A[A[B[A[B
[20:05:27] You: 
[20:05:27] You: 
[20:05:32] You: ewgwq
[20:05:32] You: ewgwq
[20:05:40] You: 
[20:05:40] You: 
[20:05:43] You: hi
[20:05:43] You: hi
[20:05:44] You: 
[20:05:44] You: 
[20:05:44] You: 
[20:05:44] You: 
[20:05:47] You: 
[20:05:47] You: 
[20:05:49] You: p
[20:05:49] You: p
[20:05:49] You: 
[20:05:49] You: 
[20:05:50] You: p
[20:05:50] You: p
[20:05:51] You: [B[B[B[B[B
[20:05:51] You: [B[B[B[B[B
[20:05:51] You: 
[20:05:51] You: 
[20:05:52] You: 
[20:05:52] You: 
[20:05:52] You: 
[20:05:52] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:53] You: 
[20:05:59] You: [B[B[B[B[B[B[A[A[A[B[B[B[B[B[A[A[A[B[B[B[B[B[A[A[A[A[B
[20:05:59] You: [B[B[B[B[B[B[A[A[A[B[B[B[B[B[A[A[A[B[B[B[B[B[A[A[A[A[B
[20:05:59] You: 
[20:05:59] You: 
[20:06:01] You: 
[20:06:01] You: 
[20:07:39] You: 
[20:07:39] You: 
[20:07:39] You: 
[20:07:40] You: 
[20:07:40] You: 
[20:07:40] You: 
[20:08:48] You: fgfdhfhd
[20:08:48] You: fgfdhfhd
[20:08:51] You: 
[20:08:51] You: 
[20:08:53] You: uuhgoui
[20:08:53] You: uuhgoui
[20:08:54] You: 
[20:08:54] You: 
[20:08:54] You: 
[20:08:54] You: 
[20:08:54] You: 
[20:08:54] You: 
[20:08:55] You: 
[20:08:55] You: 
[20:08:55] You: 
[20:08:55] You: 
[20:08:56] You: hio[
[20:08:56] You: hio[
[20:08:57] You: 
[20:08:57] You: 
[20:08:57] You: jo
[20:08:57] You: jo
[20:08:58] You: oipj
[20:08:58] You: oipj
[20:09:00] You: tdifutrsdutr
[20:09:00] You: tdifutrsdutr
[20:02:36] You: reafge
[20:02:36] You: reafge
[20:02:38] You: eafipuep
[20:02:38] You: eafipuep
[20:02:39] You: eoipgopiep
[20:02:39] You: eoipgopiep
[20:02:41] You: 
[20:02:41] You: 
[20:02:44] You: iopjopaieg
[20:02:44] You: iopjopaieg
[20:02:45] You: 
[20:02:45] You: 
[20:02:46] You: eagko
[20:02:46] You: eagko
[20:02:46] You: 
[20:02:46] You: 
[20:02:46] You: 
[20:02:46] You: 
[20:02:47] You: eaot
[20:02:47] You: eaot
[20:02:59] You: grsgsrhjkljgo;srk
[20:02:59] You: grsgsrhjkljgo;srk
[20:03:05] You: epgkorggseriogjkopisrjkgovlwprkghopwrgikowrh
[20:03:05] You: epgkorggseriogjkopisrjkgovlwprkghopwrgikowrh
[20:04:48] 1804289383: vdsbgbgf
[20:04:48] 1804289383: vdsbgbgf
[20:04:49] 1804289383: 
[20:04:49] 1804289383: 
[20:04:49] 1804289383: 
[20:04:49] 1804289383: 
[20:04:49] 1804289383: 
[20:04:49] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:50] 1804289383: 
[20:04:51] 1804289383: 
[20:04:51] 1804289383: 
[20:04:51] 1804289383: 
[20:04:51] 1804289383: 
[05:10:55] 1804289383: feaofgieoasg[p0roaesg
[05:10:55] 1804289383: feaofgieoasg[p0roaesg
[05:10:58] 1804289383: 
[05:10:58] 1804289383: 
[05:10:58] 1804289383: 
[05:10:58] 1804289383: 
[05:14:39] hi: oeasigfj
[05:14:39] hi: oeasigfj
[05:14:40] hi: feaiorpgfiopre
[05:14:40] hi: feaiorpgfiopre
[05:14:45] hi: 
[05:14:45] hi: 
[05:14:51] teast: teaspjigporeg
[05:14:51] teast: teaspjigporeg
[05:14:53] teast: sraga
[05:14:53] teast: sraga
[05:14:54] teast: rashrs
[05:14:54] teast: rashrs
[05:15:02] hi: rgasrgasrasgrgasrsgrsagrf
[05:15:02] hi: rgasrgasrasgrgasrsgrsagrf
[05:15:03] hi: gfsrag
[05:15:03] hi: gfsrag
[05:15:04] hi: grasg
[05:15:04] hi: grasg
[05:15:05] hi: rgsa
[05:15:05] hi: rgsa
[05:15:05] hi: 
[05:15:05] hi: 
[05:15:09] teast: eager
[05:15:09] teast: eager
[05:15:16] hi: the old client doesnt update
[05:15:16] hi: the old client doesnt update
[05:18:58] feas: regsay
[05:18:58] feas: regsay
[05:19:16] rfewagr: reyagr
[05:19:16] rfewagr: reyagr
[05:19:20] rfewagr: sdfhfds
[05:19:20] rfewagr: sdfhfds
[05:19:21] rfewagr: 
[05:19:21] rfewagr: 
[05:19:22] rfewagr: uio
[05:19:22] rfewagr: uio
[05:19:22] rfewagr: 
[05:19:22] rfewagr: 
[05:19:23] rfewagr: 
[05:19:23] rfewagr: 
[05:19:23] rfewagr: 
[05:19:23] rfewagr: 
[05:19:23] rfewagr: 
[05:19:23] rfewagr: 
[05:19:24] rfewagr: 
[05:19:24] rfewagr: 
[05:19:24] rfewagr: 
[05:19:24] rfewagr: 
[05:19:24] rfewagr: 
[05:19:24] rfewagr: 
[05:19:25] rfewagr: uyipl
[05:19:25] rfewagr: uyipl
[05:19:28] rfewagr: 
[05:19:28] rfewagr: 
[05:19:28] rfewagr: 
[05:19:28] rfewagr: 
[05:19:28] rfewagr: 
[05:19:28] rfewagr: 
[05:19:33] fehrsg: asfjopsg
[05:19:33] fehrsg: asfjopsg
[05:19:34] fehrsg: 
[05:19:34] fehrsg: 
[05:19:35] fehrsg: edfgopserig
[05:19:35] fehrsg: edfgopserig
[05:19:41] rfewagr: [B[B[B[B
[05:19:41] rfewagr: [B[B[B[B
[05:19:41] rfewagr: 
[05:19:41] rfewagr: 
[05:19:41] rfewagr: 
[05:19:41] rfewagr: 
[05:19:45] fehrsg: dsgsag
[05:19:45] fehrsg: dsgsag
[05:19:45] fehrsg: 
[05:19:45] fehrsg: 
[05:19:46] fehrsg: gher
[05:19:46] fehrsg: gher
[05:19:46] fehrsg: ha
[05:19:46] fehrsg: ha
[05:19:46] fehrsg: etd
[05:19:46] fehrsg: etd
[05:19:46] fehrsg: h
[05:19:46] fehrsg: h
[05:19:46] fehrsg: 
[05:19:46] fehrsg: 
[05:19:46] fehrsg: ht
[05:19:46] fehrsg: ht
[05:19:47] fehrsg: sd
[05:19:47] fehrsg: sd
[05:19:47] fehrsg: yhe
[05:19:47] fehrsg: yhe
[05:19:47] fehrsg: ah
[05:19:47] fehrsg: ah
[05:19:47] fehrsg: ers
[05:19:47] fehrsg: ers
[05:19:48] fehrsg: hg
[05:19:48] fehrsg: hg
[05:19:48] fehrsg: dtted
[05:19:48] fehrsg: dtted
[05:19:48] fehrsg: h
[05:19:48] fehrsg: h
[05:19:48] fehrsg: e
[05:19:48] fehrsg: e
[05:19:48] fehrsg: 
[05:19:48] fehrsg: 
[05:19:49] fehrsg: er
[05:19:49] fehrsg: er
[05:19:49] fehrsg: re
[05:19:49] fehrsg: re
[05:19:49] fehrsg: her
[05:19:49] fehrsg: her
[05:19:49] fehrsg: hg
[05:19:49] fehrsg: hg
[05:19:49] fehrsg: rhe
[05:19:49] fehrsg: rhe
[05:19:49] fehrsg: r
[05:19:49] fehrsg: r
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: 
[05:19:50] fehrsg: ds
[05:19:50] fehrsg: ds
[05:19:50] fehrsg: b
[05:19:50] fehrsg: b
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:51] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:52] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[05:19:53] fehrsg: 
[20:06:47] [A: 
[20:06:47] [A: 
[20:06:55] [A: b
[20:06:55] [A: b
[20:06:57] [A: 
[20:06:57] [A: 
[20:06:57] [A: dsh
[20:06:57] [A: dsh
[20:06:58] [A: gjs
[20:06:58] [A: gjs
[20:06:59] [A: tsru
[20:06:59] [A: tsru
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:06:59] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:00] [A: 
[20:07:04] a: tr
[20:07:04] a: tr
[20:07:04] a: yh
[20:07:04] a: yh
[20:07:04] a: 
[20:07:04] a: 
[20:07:04] a: 
[20:07:04] a: 
[20:07:04] a: 
[20:07:04] a: 
[20:07:04] a: 
[20:07:04] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:05] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:06] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:07] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:08] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:09] a: 
[20:07:10] a: 
[20:07:10] a: 
[20:07:20] b: agseestgwe
[20:07:20] b: agseestgwe
[20:07:22] b: weat
[20:07:22] b: weat
[20:07:22] b: 
[20:07:22] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:23] b: 
[20:07:24] b: 
[20:07:24] b: 
[20:07:26] [A: io;i
[20:07:26] [A: io;i
[20:07:28] [A: ij['
[20:07:28] [A: ij['
[20:07:29] [A: ioj;
[20:07:29] [A: ioj;
[20:07:31] [A: iop;ji
[20:07:31] [A: iop;ji
[20:07:37] [A: 
[20:07:37] [A: 
[20:07:37] b: 
[20:07:43] [A: a
[20:07:43] [A: a
[20:07:45] b: a
[20:07:45] b: a
[20:07:46] b: 
[20:07:46] b: 
[20:07:47] b: a
[20:07:47] b: a
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:47] b: 
[20:07:48] b: 
[20:07:48] b: 
[20:07:48] b: 
[20:07:48] b: 
[20:07:48] b: 
[20:07:48] b: 
[20:08:00] l: helo
[20:08:00] l: helo
[20:08:03] g: helo
[20:08:03] g: helo
[20:08:06] l: rawr
[20:08:06] l: rawr
[20:08:10] l: huh
[20:08:10] l: huh
[20:08:11] l: 
[20:08:11] l: 
[20:08:14] g: w
[20:08:14] g: w
[20:08:14] g: w
[20:08:14] g: w
[20:08:15] g: w
[20:08:15] g: w
[20:08:15] g: w
[20:08:15] g: w
[20:08:16] g: w
[20:08:16] g: w
[20:08:16] g: 
[20:08:16] g: 
[20:08:16] g: w
[20:08:16] g: w
[20:08:16] g: w
[20:08:16] g: w
[20:08:18] g: 
[20:08:18] g: 
[20:08:18] g: 
[20:08:18] g: 
[20:08:18] g: 
[20:08:18] g: 
[20:08:19] g: 
[20:08:19] g: 
[20:08:19] g: 
[20:08:19] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:21] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:08:22] g: 
[20:11:14] l: huh
[20:11:14] l: huh
[20:11:19] l: wha
[20:11:19] l: wha
[20:11:25] l: why do msgs double send
[20:11:25] l: why do msgs double send
[20:11:32] g: [B[B[B
[20:11:32] g: [B[B[B
[20:11:36] g: are msgs double sending
[20:11:36] g: are msgs double sending
[20:11:41] l: lmao
[20:11:41] l: lmao
[20:11:49] d: lol
[20:11:49] d: lol
[20:11:52] g: kekw
[20:11:52] g: kekw
[20:11:54] g: 
[20:11:54] g: 
[20:11:55] g: 
[20:11:55] g: 
[20:11:55] g: 
[20:11:55] g: 
[20:11:55] g: 
[20:11:55] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:56] g: 
[20:11:57] g: kdaskfo;
[20:11:57] g: kdaskfo;
[20:11:59] g: lkfajljf
[20:11:59] g: lkfajljf
[20:12:00] g: a;oefk;oasek
[20:12:00] g: a;oefk;oasek
[20:12:02] d: w;oafij[3~
[20:12:02] d: w;oafij[3~
[20:12:02] d: 
[20:12:02] d: 
[20:12:02] d: 
[20:12:02] d: 
[20:12:02] d: 
[20:12:02] d: 
[20:12:02] d: 
[20:12:02] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:03] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:04] d: 
[20:12:07] g: wfgaegol[3~
[20:12:07] g: wfgaegol[3~
[20:12:07] g: 
[20:12:07] g: 
[20:12:08] g: 
[20:12:08] g: 
[20:12:08] g: 
[20:12:08] g: 
[20:12:08] g: 
[20:12:08] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:12:09] g: 
[20:13:29] d: [A[A[A[B[B[B
[20:13:29] d: [A[A[A[B[B[B
[20:13:32] d: 
[20:13:32] d: 
[20:13:32] d: 
[20:13:32] d: 
[20:13:35] d: ncurses
[20:13:35] d: ncurses
[20:13:39] g: [B[B[B[A[B[B
[20:13:39] g: [B[B[B[A[B[B
[20:13:41] g: 
[20:13:41] g: 
[20:13:41] g: 
[20:13:41] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:42] g: 
[20:13:44] g: 
[20:13:44] g: 
[20:13:44] g: 
[20:13:44] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:45] g: 
[20:13:46] g: 
[20:13:46] g: 
[20:13:46] g: 
[20:13:46] g: 
[20:13:47] g: 
[20:13:47] g: 
[20:13:51] g: 134
[20:13:51] g: 134
[20:13:54] g: 123
[20:13:54] g: 123
[20:14:13] g: 12345678910111213141516
[20:14:13] g: 12345678910111213141516
[20:14:14] g: 
[20:14:14] g: 
[20:14:14] g: 
[20:14:14] g: 
[20:14:14] g: 
[20:14:14] g: 
[20:14:15] g: 
[20:14:15] g: 
[20:14:17] g: ]tqwgi0
[20:14:17] g: ]tqwgi0
[20:14:18] g: pweoagupoiaerghop
[20:14:18] g: pweoagupoiaerghop
[20:14:19] g: huh
[20:14:19] g: huh
[20:14:20] g: 11412413
[20:14:20] g: 11412413
[20:14:21] g: 1423
[20:14:21] g: 1423
[20:14:22] g: 34413341234
[20:14:22] g: 34413341234
[20:14:23] g: kdo
[20:14:23] g: kdo
[20:14:25] g: dkdlc
[20:14:25] g: dkdlc
[20:14:27] g: dkdklks
[20:14:27] g: dkdklks
[20:14:28] g: kys
[20:14:28] g: kys
[20:14:30] g: kdlsldi
[20:14:30] g: kdlsldi
[20:14:32] g: didlasfo
[20:14:32] g: didlasfo
[20:14:32] g: 
[20:14:32] g: 
[20:14:34] g: 3344334234
[20:14:34] g: 3344334234
[20:14:35] g: 134
[20:14:35] g: 134
[20:14:35] g: 134134
[20:14:35] g: 134134
[20:14:35] g: 134
[20:14:35] g: 134
[20:14:36] g: 134
[20:14:36] g: 134
[20:14:36] g: 134
[20:14:36] g: 134
[20:14:36] g: 4
[20:14:36] g: 4
[20:14:37] g: 34
[20:14:37] g: 34
[20:14:37] g: 3
[20:14:37] g: 3
[20:14:37] g: 3
[20:14:37] g: 3
[20:14:37] g: 3
[20:14:37] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:38] g: 3
[20:14:39] g: 
[20:14:39] g: 
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:39] g: 3
[20:14:40] g: 
[20:14:40] g: 
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:40] g: 
[20:14:40] g: 
[20:14:40] g: 3
[20:14:40] g: 3
[20:14:41] g: 3
[20:14:41] g: 3
[20:14:41] g: 3
[20:14:41] g: 3
[20:14:41] g: 
[20:14:41] g: 
[20:14:41] g: 33
[20:14:41] g: 33
[20:14:41] g: 3
[20:14:41] g: 3
[20:14:41] g: 
[20:14:41] g: 
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 
[20:14:42] g: 
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:42] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 
[20:14:43] g: 
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:43] g: 3
[20:14:44] g: 33
[20:14:44] g: 33
[20:14:45] g: 333
[20:14:45] g: 333
[20:14:45] g: 
[20:14:45] g: 
[20:14:45] g: 3
[20:14:45] g: 3
[20:14:46] g: 3
[20:14:46] g: 3
[20:14:46] g: 33
[20:14:46] g: 33
[20:14:46] g: 
[20:14:46] g: 
[20:14:46] g: 
[20:14:46] g: 
[20:14:47] g: 
[20:14:47] g: 
[20:14:47] g: 
[20:14:47] g: 
[20:14:47] g: 
[20:14:47] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:48] g: 
[20:14:56] d: #include <stdio.h>
[20:14:56] d: #include <stdio.h>
[20:14:57] d: #include <stdlib.h>
[20:14:57] d: #include <stdlib.h>
[20:14:57] d: #include <string.h>
[20:14:57] d: #include <string.h>
[20:14:57] d: #include <unistd.h>
[20:14:57] d: #include <unistd.h>
[20:14:57] d: #include <sys/ipc.h>
[20:14:57] d: #include <sys/ipc.h>
[20:14:57] d: #include <sys/shm.h>
[20:14:57] d: #include <sys/shm.h>
[20:14:57] d: #include <sys/sem.h>
[20:14:57] d: #include <sys/sem.h>
[20:14:57] d: #include <ncurses.h>
[20:14:57] d: #include <ncurses.h>
[20:14:57] d: #include <time.h>
[20:14:57] d: #include <time.h>
[20:14:57] d: #include <signal.h>
[20:14:57] d: #include <signal.h>
[20:14:57] d: 
[20:14:57] d: 
[20:14:58] d: #define SHM_KEY 1234
[20:14:58] d: #define SHM_KEY 1234
[20:14:58] d: #define SEM_KEY 5678
[20:14:58] d: #define SEM_KEY 5678
[20:14:58] d: #define MAX_MESSAGE_LENGTH 256
[20:14:58] d: #define MAX_MESSAGE_LENGTH 256
[20:14:58] d: #define CHAT_LOG_FILE "chat_log.txt"
[20:14:58] d: #define CHAT_LOG_FILE "chat_log.txt"
[20:14:58] d: 
[20:14:58] d: 
[20:14:58] d: // Semaphore operations
[20:14:58] d: // Semaphore operations
[20:14:58] d: void semaphore_lock(int semid) {
[20:14:58] d: void semaphore_lock(int semid) {
[20:14:58] d:     struct sembuf op = {0, -1, 0};
[20:14:58] d:     struct sembuf op = {0, -1, 0};
[20:14:58] d:     semop(semid, &op, 1);
[20:14:58] d:     semop(semid, &op, 1);
[20:14:58] d: }
[20:14:58] d: }
[20:14:59] d: 
[20:14:59] d: 
[20:14:59] d: void semaphore_unlock(int semid) {
[20:14:59] d: void semaphore_unlock(int semid) {
[20:14:59] d:     struct sembuf op = {0, 1, 0};
[20:14:59] d:     struct sembuf op = {0, 1, 0};
[20:14:59] d:     semop(semid, &op, 1);
[20:14:59] d:     semop(semid, &op, 1);
[20:14:59] d: }
[20:14:59] d: }
[20:14:59] d: 
[20:14:59] d: 
[20:14:59] d: // Function to append messages to the chat log
[20:14:59] d: // Function to append messages to the chat log
[20:14:59] d: void save_message_to_file(const char *message) {
[20:14:59] d: void save_message_to_file(const char *message) {
[20:14:59] d:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:14:59] d:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:14:59] d:     if (file == NULL) {
[20:14:59] d:     if (file == NULL) {
[20:15:00] d:         perror("Failed to open chat log file");
[20:15:00] d:         perror("Failed to open chat log file");
[20:15:00] d:         return;
[20:15:00] d:         return;
[20:15:00] d:     }
[20:15:00] d:     }
[20:15:00] d:     fprintf(file, "%s\n", message);
[20:15:00] d:     fprintf(file, "%s\n", message);
[20:15:00] d:     fclose(file);
[20:15:00] d:     fclose(file);
[20:15:00] d: }
[20:15:00] d: }
[20:15:00] d: 
[20:15:00] d: 
[20:15:00] d: // Function to load and display the chat log
[20:15:00] d: // Function to load and display the chat log
[20:15:00] d: void load_chat_log() {
[20:15:00] d: void load_chat_log() {
[20:15:00] d:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:00] d:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:01] d:     if (file == NULL) {
[20:15:01] d:     if (file == NULL) {
[20:15:01] d:         return; // No chat log yet
[20:15:01] d:         return; // No chat log yet
[20:15:01] d:     }
[20:15:01] d:     }
[20:15:01] d:     char line[MAX_MESSAGE_LENGTH];
[20:15:01] d:     char line[MAX_MESSAGE_LENGTH];
[20:15:01] d:     while (fgets(line, sizeof(line), file)) {
[20:15:01] d:     while (fgets(line, sizeof(line), file)) {
[20:15:01] d:         printw("%s", line);
[20:15:01] d:         printw("%s", line);
[20:15:01] d:     }
[20:15:01] d:     }
[20:15:01] d:     fclose(file);
[20:15:01] d:     fclose(file);
[20:15:01] d: }
[20:15:01] d: }
[20:15:01] d: 
[20:15:01] d: 
[20:15:02] d: void init_ncurses() {
[20:15:02] d: void init_ncurses() {
[20:15:02] d:     initscr();
[20:15:02] d:     initscr();
[20:15:02] d:     cbreak();
[20:15:02] d:     cbreak();
[20:15:02] d:     noecho();
[20:15:02] d:     noecho();
[20:15:02] d:     scrollok(stdscr, TRUE);
[20:15:02] d:     scrollok(stdscr, TRUE);
[20:15:02] d: }
[20:15:02] d: }
[20:15:02] d: 
[20:15:02] d: 
[20:15:02] d: void cleanup_ncurses() {
[20:15:02] d: void cleanup_ncurses() {
[20:15:02] d:     endwin();
[20:15:02] d:     endwin();
[20:15:02] d: }
[20:15:02] d: }
[20:15:03] d: 
[20:15:03] d: 
[20:15:03] d: // Get a timestamp for each message
[20:15:03] d: // Get a timestamp for each message
[20:15:03] d: void get_timestamp(char *buffer, size_t size) {
[20:15:03] d: void get_timestamp(char *buffer, size_t size) {
[20:15:03] d:     time_t now = time(NULL);
[20:15:03] d:     time_t now = time(NULL);
[20:15:03] d:     struct tm *t = localtime(&now);
[20:15:03] d:     struct tm *t = localtime(&now);
[20:15:03] d:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:03] d:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:03] d: }
[20:15:03] d: }
[20:15:03] d: 
[20:15:03] d: 
[20:15:03] d: // Process to handle live updates
[20:15:03] d: // Process to handle live updates
[20:15:03] d: void live_update_process(int sem_id) {
[20:15:03] d: void live_update_process(int sem_id) {
[20:15:04] d:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:04] d:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:04] d:     if (shm_id < 0) {
[20:15:04] d:     if (shm_id < 0) {
[20:15:04] d:         perror("shmget failed in live_update_process");
[20:15:04] d:         perror("shmget failed in live_update_process");
[20:15:04] d:         exit(EXIT_FAILURE);
[20:15:04] d:         exit(EXIT_FAILURE);
[20:15:04] d:     }
[20:15:04] d:     }
[20:15:04] d: 
[20:15:04] d: 
[20:15:04] d:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:04] d:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:04] d:     if (shared_memory == (char *)-1) {
[20:15:04] d:     if (shared_memory == (char *)-1) {
[20:15:04] d:         perror("shmat failed in live_update_process");
[20:15:04] d:         perror("shmat failed in live_update_process");
[20:15:04] d:         exit(EXIT_FAILURE);
[20:15:04] d:         exit(EXIT_FAILURE);
[20:15:05] d:     }
[20:15:05] d:     }
[20:15:05] d: 
[20:15:05] d: 
[20:15:05] d:     while (1) {
[20:15:05] d:     while (1) {
[20:15:05] d:         semaphore_lock(sem_id);
[20:15:05] d:         semaphore_lock(sem_id);
[20:15:05] d:         if (strlen(shared_memory) > 0) {
[20:15:05] d:         if (strlen(shared_memory) > 0) {
[20:15:05] d:             // Display the message and clear shared memory
[20:15:05] d:             // Display the message and clear shared memory
[20:15:05] d:             printw("%s\n", shared_memory);
[20:15:05] d:             printw("%s\n", shared_memory);
[20:15:05] d:             save_message_to_file(shared_memory);
[20:15:05] d:             save_message_to_file(shared_memory);
[20:15:05] d:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:05] d:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:05] d:             refresh();
[20:15:05] d:             refresh();
[20:15:06] d:         }
[20:15:06] d:         }
[20:15:06] d:         semaphore_unlock(sem_id);
[20:15:06] d:         semaphore_unlock(sem_id);
[20:15:06] d: 
[20:15:06] d: 
[20:15:06] d:         usleep(100000); // Check every 100ms
[20:15:06] d:         usleep(100000); // Check every 100ms
[20:15:06] d:     }
[20:15:06] d:     }
[20:15:06] d: 
[20:15:06] d: 
[20:15:06] d:     shmdt(shared_memory);
[20:15:06] d:     shmdt(shared_memory);
[20:15:06] d:     exit(EXIT_SUCCESS);
[20:15:06] d:     exit(EXIT_SUCCESS);
[20:15:06] d: }
[20:15:06] d: }
[20:15:06] d: 
[20:15:06] d: 
[20:15:07] d: int main() {
[20:15:07] d: int main() {
[20:15:07] d:     int shm_id, sem_id;
[20:15:07] d:     int shm_id, sem_id;
[20:15:07] d:     char *shared_memory;
[20:15:07] d:     char *shared_memory;
[20:15:07] d:     char username[50];
[20:15:07] d:     char username[50];
[20:15:07] d: 
[20:15:07] d: 
[20:15:07] d:     // Initialize shared memory
[20:15:07] d:     // Initialize shared memory
[20:15:07] d:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:07] d:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:07] d:     if (shm_id < 0) {
[20:15:07] d:     if (shm_id < 0) {
[20:15:07] d:         perror("shmget failed");
[20:15:07] d:         perror("shmget failed");
[20:15:07] d:         exit(EXIT_FAILURE);
[20:15:07] d:         exit(EXIT_FAILURE);
[20:15:08] d:     }
[20:15:08] d:     }
[20:15:08] d: 
[20:15:08] d: 
[20:15:08] d:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:08] d:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:08] d:     if (shared_memory == (char *)-1) {
[20:15:08] d:     if (shared_memory == (char *)-1) {
[20:15:08] d:         perror("shmat failed");
[20:15:08] d:         perror("shmat failed");
[20:15:08] d:         exit(EXIT_FAILURE);
[20:15:08] d:         exit(EXIT_FAILURE);
[20:15:08] d:     }
[20:15:08] d:     }
[20:15:08] d: 
[20:15:08] d: 
[20:15:08] d:     // Initialize semaphore
[20:15:08] d:     // Initialize semaphore
[20:15:09] d:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:09] d:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:09] d:     if (sem_id < 0) {
[20:15:09] d:     if (sem_id < 0) {
[20:15:09] d:         perror("semget failed");
[20:15:09] d:         perror("semget failed");
[20:15:09] d:         exit(EXIT_FAILURE);
[20:15:09] d:         exit(EXIT_FAILURE);
[20:15:09] d:     }
[20:15:09] d:     }
[20:15:09] d: 
[20:15:09] d: 
[20:15:09] d:     // Initialize semaphore value to 1 (unlocked)
[20:15:09] d:     // Initialize semaphore value to 1 (unlocked)
[20:15:09] d:     semctl(sem_id, 0, SETVAL, 1);
[20:15:09] d:     semctl(sem_id, 0, SETVAL, 1);
[20:15:09] d: 
[20:15:09] d: 
[20:15:09] d:     // Initialize ncurses
[20:15:09] d:     // Initialize ncurses
[20:15:10] d:     init_ncurses();
[20:15:10] d:     init_ncurses();
[20:15:10] d: 
[20:15:10] d: 
[20:15:10] d:     // Prompt for username
[20:15:10] d:     // Prompt for username
[20:15:10] d:     mvprintw(0, 0, "Enter your username: ");
[20:15:10] d:     mvprintw(0, 0, "Enter your username: ");
[20:15:10] d:     echo();
[20:15:10] d:     echo();
[20:15:10] d:     getnstr(username, sizeof(username));
[20:15:10] d:     getnstr(username, sizeof(username));
[20:15:10] d:     noecho();
[20:15:10] d:     noecho();
[20:15:10] d: 
[20:15:10] d: 
[20:15:10] d:     // Load chat history
[20:15:10] d:     // Load chat history
[20:15:10] d:     load_chat_log();
[20:15:10] d:     load_chat_log();
[20:15:11] d:     refresh();
[20:15:11] d:     refresh();
[20:15:11] d: 
[20:15:11] d: 
[20:15:11] d:     // Fork to handle live updates
[20:15:11] d:     // Fork to handle live updates
[20:15:11] d:     pid_t pid = fork();
[20:15:11] d:     pid_t pid = fork();
[20:15:11] d:     if (pid == 0) {
[20:15:11] d:     if (pid == 0) {
[20:15:11] d:         live_update_process(sem_id);
[20:15:11] d:         live_update_process(sem_id);
[20:15:11] d:     }
[20:15:11] d:     }
[20:15:11] d: 
[20:15:11] d: 
[20:15:11] d:     char input[MAX_MESSAGE_LENGTH];
[20:15:11] d:     char input[MAX_MESSAGE_LENGTH];
[20:15:11] d:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:11] d:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:12] d: 
[20:15:12] d: 
[20:15:12] d:     while (1) {
[20:15:12] d:     while (1) {
[20:15:12] d:         // Get user input
[20:15:12] d:         // Get user input
[20:15:12] d:         mvprintw(LINES - 2, 0, "> ");
[20:15:12] d:         mvprintw(LINES - 2, 0, "> ");
[20:15:12] d:         clrtoeol();
[20:15:12] d:         clrtoeol();
[20:15:12] d:         echo();
[20:15:12] d:         echo();
[20:15:12] d:         getnstr(input, MAX_MESSAGE_LENGTH);
[20:15:12] d:         getnstr(input, MAX_MESSAGE_LENGTH);
[20:15:12] d:         noecho();
[20:15:12] d:         noecho();
[20:15:12] d: 
[20:15:12] d: 
[20:15:12] d:         if (strcmp(input, "/quit") == 0) {
[20:15:12] d:         if (strcmp(input, "/quit") == 0) {
[20:15:13] d:             break;
[20:15:13] d:             break;
[20:15:13] d:         }
[20:15:13] d:         }
[20:15:13] d: 
[20:15:13] d: 
[20:15:13] d:         // Add timestamp and username to the message
[20:15:13] d:         // Add timestamp and username to the message
[20:15:13] d:         char timestamp[20];
[20:15:13] d:         char timestamp[20];
[20:15:13] d:         get_timestamp(timestamp, sizeof(timestamp));
[20:15:13] d:         get_timestamp(timestamp, sizeof(timestamp));
[20:15:13] d:         snprintf(formatted_message, sizeof(formatted_message), "%s %s: %s", timestamp, username, input);
[20:15:13] d:         snprintf(formatted_message, sizeof(formatted_message), "%s %s: %s", timestamp, username, input);
[20:15:13] d: 
[20:15:13] d: 
[20:15:13] d:         // Save and display message
[20:15:13] d:         // Save and display message
[20:15:13] d:         save_message_to_file(formatted_message);
[20:15:13] d:         save_message_to_file(formatted_message);
[20:15:14] d:         semaphore_lock(sem_id);
[20:15:14] d:         semaphore_lock(sem_id);
[20:15:14] d:         strncpy(shared_memory, formatted_message, MAX_MESSAGE_LENGTH);
[20:15:14] d:         strncpy(shared_memory, formatted_message, MAX_MESSAGE_LENGTH);
[20:15:14] d:         semaphore_unlock(sem_id);
[20:15:14] d:         semaphore_unlock(sem_id);
[20:15:14] d: 
[20:15:14] d: 
[20:15:14] d:         // Clear shared memory after broadcasting
[20:15:14] d:         // Clear shared memory after broadcasting
[20:15:14] d:         usleep(100000); // Give clients time to read
[20:15:14] d:         usleep(100000); // Give clients time to read
[20:15:14] d:         semaphore_lock(sem_id);
[20:15:14] d:         semaphore_lock(sem_id);
[20:15:14] d:         memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:14] d:         memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:14] d:         semaphore_unlock(sem_id);
[20:15:14] d:         semaphore_unlock(sem_id);
[20:15:14] d:     }
[20:15:14] d:     }
[20:15:15] d: 
[20:15:15] d: 
[20:15:15] d:     // Cleanup
[20:15:15] d:     // Cleanup
[20:15:15] d:     kill(pid, SIGKILL); // Terminate the child process
[20:15:15] d:     kill(pid, SIGKILL); // Terminate the child process
[20:15:15] d:     cleanup_ncurses();
[20:15:15] d:     cleanup_ncurses();
[20:15:15] d:     shmdt(shared_memory);
[20:15:15] d:     shmdt(shared_memory);
[20:15:15] d:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:15] d:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:15] d:     semctl(sem_id, 0, IPC_RMID);
[20:15:15] d:     semctl(sem_id, 0, IPC_RMID);
[20:15:15] d: 
[20:15:15] d: 
[20:15:15] d:     return 0;
[20:15:15] d:     return 0;
[20:15:15] d: }
[20:15:15] d: }
[20:15:22] g: [B[B[B[B[B[B[B[B[B[B[B[B#include <stdio.h>
[20:15:22] g: [B[B[B[B[B[B[B[B[B[B[B[B#include <stdio.h>
[20:15:22] g: #include <stdlib.h>
[20:15:22] g: #include <stdlib.h>
[20:15:22] g: #include <string.h>
[20:15:22] g: #include <string.h>
[20:15:22] g: #include <unistd.h>
[20:15:22] g: #include <unistd.h>
[20:15:22] g: #include <sys/ipc.h>
[20:15:22] g: #include <sys/ipc.h>
[20:15:22] g: #include <sys/shm.h>
[20:15:22] g: #include <sys/shm.h>
[20:15:22] g: #include <sys/sem.h>
[20:15:22] g: #include <sys/sem.h>
[20:15:22] g: #include <ncurses.h>
[20:15:22] g: #include <ncurses.h>
[20:15:22] g: #include <time.h>
[20:15:22] g: #include <time.h>
[20:15:23] g: #include <signal.h>
[20:15:23] g: #include <signal.h>
[20:15:23] g: 
[20:15:23] g: 
[20:15:23] g: #define SHM_KEY 1234
[20:15:23] g: #define SHM_KEY 1234
[20:15:23] g: #define SEM_KEY 5678
[20:15:23] g: #define SEM_KEY 5678
[20:15:23] g: #define MAX_MESSAGE_LENGTH 256
[20:15:23] g: #define MAX_MESSAGE_LENGTH 256
[20:15:23] g: #define CHAT_LOG_FILE "chat_log.txt"
[20:15:23] g: #define CHAT_LOG_FILE "chat_log.txt"
[20:15:23] g: 
[20:15:23] g: 
[20:15:23] g: // Semaphore operations
[20:15:23] g: // Semaphore operations
[20:15:23] g: void semaphore_lock(int semid) {
[20:15:23] g: void semaphore_lock(int semid) {
[20:15:23] g:     struct sembuf op = {0, -1, 0};
[20:15:23] g:     struct sembuf op = {0, -1, 0};
[20:15:24] g:     semop(semid, &op, 1);
[20:15:24] g:     semop(semid, &op, 1);
[20:15:24] g: }
[20:15:24] g: }
[20:15:24] g: 
[20:15:24] g: 
[20:15:24] g: void semaphore_unlock(int semid) {
[20:15:24] g: void semaphore_unlock(int semid) {
[20:15:24] g:     struct sembuf op = {0, 1, 0};
[20:15:24] g:     struct sembuf op = {0, 1, 0};
[20:15:24] g:     semop(semid, &op, 1);
[20:15:24] g:     semop(semid, &op, 1);
[20:15:24] g: }
[20:15:24] g: }
[20:15:24] g: 
[20:15:24] g: 
[20:15:24] g: // Function to append messages to the chat log
[20:15:24] g: // Function to append messages to the chat log
[20:15:24] g: void save_message_to_file(const char *message) {
[20:15:24] g: void save_message_to_file(const char *message) {
[20:15:25] g:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:15:25] g:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:15:25] g:     if (file == NULL) {
[20:15:25] g:     if (file == NULL) {
[20:15:25] g:         perror("Failed to open chat log file");
[20:15:25] g:         perror("Failed to open chat log file");
[20:15:25] g:         return;
[20:15:25] g:         return;
[20:15:25] g:     }
[20:15:25] g:     }
[20:15:25] g:     fprintf(file, "%s\n", message);
[20:15:25] g:     fprintf(file, "%s\n", message);
[20:15:25] g:     fclose(file);
[20:15:25] g:     fclose(file);
[20:15:25] g: }
[20:15:25] g: }
[20:15:25] g: 
[20:15:25] g: 
[20:15:25] g: // Function to load and display the chat log
[20:15:25] g: // Function to load and display the chat log
[20:15:26] g: void load_chat_log() {
[20:15:26] g: void load_chat_log() {
[20:15:26] g:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:26] g:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:26] g:     if (file == NULL) {
[20:15:26] g:     if (file == NULL) {
[20:15:26] g:         return; // No chat log yet
[20:15:26] g:         return; // No chat log yet
[20:15:26] g:     }
[20:15:26] g:     }
[20:15:26] g:     char line[MAX_MESSAGE_LENGTH];
[20:15:26] g:     char line[MAX_MESSAGE_LENGTH];
[20:15:26] g:     while (fgets(line, sizeof(line), file)) {
[20:15:26] g:     while (fgets(line, sizeof(line), file)) {
[20:15:26] g:         printw("%s", line);
[20:15:26] g:         printw("%s", line);
[20:15:26] g:     }
[20:15:26] g:     }
[20:15:26] g:     fclose(file);
[20:15:26] g:     fclose(file);
[20:15:27] g: }
[20:15:27] g: }
[20:15:27] g: 
[20:15:27] g: 
[20:15:27] g: void init_ncurses() {
[20:15:27] g: void init_ncurses() {
[20:15:27] g:     initscr();
[20:15:27] g:     initscr();
[20:15:27] g:     cbreak();
[20:15:27] g:     cbreak();
[20:15:27] g:     noecho();
[20:15:27] g:     noecho();
[20:15:27] g:     scrollok(stdscr, TRUE);
[20:15:27] g:     scrollok(stdscr, TRUE);
[20:15:27] g: }
[20:15:27] g: }
[20:15:27] g: 
[20:15:27] g: 
[20:15:27] g: void cleanup_ncurses() {
[20:15:27] g: void cleanup_ncurses() {
[20:15:28] g:     endwin();
[20:15:28] g:     endwin();
[20:15:28] g: }
[20:15:28] g: }
[20:15:28] g: 
[20:15:28] g: 
[20:15:28] g: // Get a timestamp for each message
[20:15:28] g: // Get a timestamp for each message
[20:15:28] g: void get_timestamp(char *buffer, size_t size) {
[20:15:28] g: void get_timestamp(char *buffer, size_t size) {
[20:15:28] g:     time_t now = time(NULL);
[20:15:28] g:     time_t now = time(NULL);
[20:15:28] g:     struct tm *t = localtime(&now);
[20:15:28] g:     struct tm *t = localtime(&now);
[20:15:28] g:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:28] g:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:28] g: }
[20:15:28] g: }
[20:15:28] g: 
[20:15:28] g: 
[20:15:29] g: // Process to handle live updates
[20:15:29] g: // Process to handle live updates
[20:15:29] g: void live_update_process(int sem_id) {
[20:15:29] g: void live_update_process(int sem_id) {
[20:15:29] g:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:29] g:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:29] g:     if (shm_id < 0) {
[20:15:29] g:     if (shm_id < 0) {
[20:15:29] g:         perror("shmget failed in live_update_process");
[20:15:29] g:         perror("shmget failed in live_update_process");
[20:15:29] g:         exit(EXIT_FAILURE);
[20:15:29] g:         exit(EXIT_FAILURE);
[20:15:29] g:     }
[20:15:29] g:     }
[20:15:29] g: 
[20:15:29] g: 
[20:15:29] g:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:29] g:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:30] g:     if (shared_memory == (char *)-1) {
[20:15:30] g:     if (shared_memory == (char *)-1) {
[20:15:30] g:         perror("shmat failed in live_update_process");
[20:15:30] g:         perror("shmat failed in live_update_process");
[20:15:30] g:         exit(EXIT_FAILURE);
[20:15:30] g:         exit(EXIT_FAILURE);
[20:15:30] g:     }
[20:15:30] g:     }
[20:15:30] g: 
[20:15:30] g: 
[20:15:30] g:     while (1) {
[20:15:30] g:     while (1) {
[20:15:30] g:         semaphore_lock(sem_id);
[20:15:30] g:         semaphore_lock(sem_id);
[20:15:30] g:         if (strlen(shared_memory) > 0) {
[20:15:30] g:         if (strlen(shared_memory) > 0) {
[20:15:30] g:             // Display the message and clear shared memory
[20:15:30] g:             // Display the message and clear shared memory
[20:15:30] g:             printw("%s\n", shared_memory);
[20:15:30] g:             printw("%s\n", shared_memory);
[20:15:31] g:             save_message_to_file(shared_memory);
[20:15:31] g:             save_message_to_file(shared_memory);
[20:15:31] g:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:31] g:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:31] g:             refresh();
[20:15:31] g:             refresh();
[20:15:31] g:         }
[20:15:31] g:         }
[20:15:31] g:         semaphore_unlock(sem_id);
[20:15:31] g:         semaphore_unlock(sem_id);
[20:15:31] g: 
[20:15:31] g: 
[20:15:31] g:         usleep(100000); // Check every 100ms
[20:15:31] g:         usleep(100000); // Check every 100ms
[20:15:31] g:     }
[20:15:31] g:     }
[20:15:31] g: 
[20:15:31] g: 
[20:15:31] g:     shmdt(shared_memory);
[20:15:31] g:     shmdt(shared_memory);
[20:15:32] g:     exit(EXIT_SUCCESS);
[20:15:32] g:     exit(EXIT_SUCCESS);
[20:15:32] g: }
[20:15:32] g: }
[20:15:32] g: 
[20:15:32] g: 
[20:15:32] g: int main() {
[20:15:32] g: int main() {
[20:15:32] g:     int shm_id, sem_id;
[20:15:32] g:     int shm_id, sem_id;
[20:15:32] g:     char *shared_memory;
[20:15:32] g:     char *shared_memory;
[20:15:32] g:     char username[50];
[20:15:32] g:     char username[50];
[20:15:32] g: 
[20:15:32] g: 
[20:15:32] g:     // Initialize shared memory
[20:15:32] g:     // Initialize shared memory
[20:15:32] g:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:32] g:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:33] g:     if (shm_id < 0) {
[20:15:33] g:     if (shm_id < 0) {
[20:15:33] g:         perror("shmget failed");
[20:15:33] g:         perror("shmget failed");
[20:15:33] g:         exit(EXIT_FAILURE);
[20:15:33] g:         exit(EXIT_FAILURE);
[20:15:33] g:     }
[20:15:33] g:     }
[20:15:33] g: 
[20:15:33] g: 
[20:15:33] g:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:33] g:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:33] g:     if (shared_memory == (char *)-1) {
[20:15:33] g:     if (shared_memory == (char *)-1) {
[20:15:33] g:         perror("shmat failed");
[20:15:33] g:         perror("shmat failed");
[20:15:33] g:         exit(EXIT_FAILURE);
[20:15:33] g:         exit(EXIT_FAILURE);
[20:15:33] g:     }
[20:15:33] g:     }
[20:15:34] g: 
[20:15:34] g: 
[20:15:34] g:     // Initialize semaphore
[20:15:34] g:     // Initialize semaphore
[20:15:34] g:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:34] g:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:34] g:     if (sem_id < 0) {
[20:15:34] g:     if (sem_id < 0) {
[20:15:34] g:         perror("semget failed");
[20:15:34] g:         perror("semget failed");
[20:15:34] g:         exit(EXIT_FAILURE);
[20:15:34] g:         exit(EXIT_FAILURE);
[20:15:34] g:     }
[20:15:34] g:     }
[20:15:34] g: 
[20:15:34] g: 
[20:15:34] g:     // Initialize semaphore value to 1 (unlocked)
[20:15:34] g:     // Initialize semaphore value to 1 (unlocked)
[20:15:34] g:     semctl(sem_id, 0, SETVAL, 1);
[20:15:34] g:     semctl(sem_id, 0, SETVAL, 1);
[20:15:35] g: 
[20:15:35] g: 
[20:15:35] g:     // Initialize ncurses
[20:15:35] g:     // Initialize ncurses
[20:15:35] g:     init_ncurses();
[20:15:35] g:     init_ncurses();
[20:15:35] g: 
[20:15:35] g: 
[20:15:35] g:     // Prompt for username
[20:15:35] g:     // Prompt for username
[20:15:35] g:     mvprintw(0, 0, "Enter your username: ");
[20:15:35] g:     mvprintw(0, 0, "Enter your username: ");
[20:15:35] g:     echo();
[20:15:35] g:     echo();
[20:15:35] g:     getnstr(username, sizeof(username));
[20:15:35] g:     getnstr(username, sizeof(username));
[20:15:35] g:     noecho();
[20:15:35] g:     noecho();
[20:15:35] g: 
[20:15:35] g: 
[20:15:36] g:     // Load chat history
[20:15:36] g:     // Load chat history
[20:15:36] g:     load_chat_log();
[20:15:36] g:     load_chat_log();
[20:15:36] g:     refresh();
[20:15:36] g:     refresh();
[20:15:36] g: 
[20:15:36] g: 
[20:15:36] g:     // Fork to handle live updates
[20:15:36] g:     // Fork to handle live updates
[20:15:36] g:     pid_t pid = fork();
[20:15:36] g:     pid_t pid = fork();
[20:15:36] g:     if (pid == 0) {
[20:15:36] g:     if (pid == 0) {
[20:15:36] g:         live_update_process(sem_id);
[20:15:36] g:         live_update_process(sem_id);
[20:15:36] g:     }
[20:15:36] g:     }
[20:15:36] g: 
[20:15:36] g: 
[20:15:37] g:     char input[MAX_MESSAGE_LENGTH];
[20:15:37] g:     char input[MAX_MESSAGE_LENGTH];
[20:15:37] g:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:37] g:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:37] g: 
[20:15:37] g: 
[20:15:37] g:     while (1) {
[20:15:37] g:     while (1) {
[20:15:37] g:         // Get user input
[20:15:37] g:         // Get user input
[20:15:37] g:         mvprintw(LINES - 2, 0, "> ");
[20:15:37] g:         mvprintw(LINES - 2, 0, "> ");
[20:15:37] g:         clrtoeol();
[20:15:37] g:         clrtoeol();
[20:15:37] g:         echo();
[20:15:37] g:         echo();
[20:15:37] g:         getnstr(input, MAX_MESSAGE_LENGTH);
[20:15:37] d: [B#include <stdio.h>
[20:15:37] d: [B#include <stdio.h>
[20:15:37] g:         noecho();
[20:15:38] d: #include <stdlib.h>
[20:15:38] d: #include <stdlib.h>
[20:15:38] g: 
[20:15:38] d: #include <string.h>
[20:15:38] d: #include <string.h>
[20:15:38] g:         if (strcmp(input, "/quit") == 0) {
[20:15:38] d: #include <unistd.h>
[20:15:38] d: #include <unistd.h>
[20:15:38] g:             break;
[20:15:38] d: #include <sys/ipc.h>
[20:15:38] d: #include <sys/ipc.h>
[20:15:38] g:         }
[20:15:38] d: #include <sys/shm.h>
[20:15:38] d: #include <sys/shm.h>
[20:15:38] g: 
[20:15:38] d: #include <sys/sem.h>
[20:15:38] d: #include <sys/sem.h>
[20:15:38] g:         // Add timestamp and username to the message
[20:15:38] d: #include <ncurses.h>
[20:15:38] d: #include <ncurses.h>
[20:15:38] g:         char timestamp[20];
[20:15:38] d: #include <time.h>
[20:15:38] d: #include <time.h>
[20:15:38] g:         get_timestamp(timestamp, sizeof(timestamp));
[20:15:38] d: #include <signal.h>
[20:15:38] d: #include <signal.h>
[20:15:38] g:         snprintf(formatted_message, sizeof(formatted_message), "%s %s: %s", timestamp, username, input);
[20:15:38] d: 
[20:15:38] d: 
[20:15:38] g: 
[20:15:39] d: #define SHM_KEY 1234
[20:15:39] d: #define SHM_KEY 1234
[20:15:39] g:         // Save and display message
[20:15:39] d: #define SEM_KEY 5678
[20:15:39] d: #define SEM_KEY 5678
[20:15:39] g:         save_message_to_file(formatted_message);
[20:15:39] d: #define MAX_MESSAGE_LENGTH 256
[20:15:39] d: #define MAX_MESSAGE_LENGTH 256
[20:15:39] g:         semaphore_lock(sem_id);
[20:15:39] d: #define CHAT_LOG_FILE "chat_log.txt"
[20:15:39] d: #define CHAT_LOG_FILE "chat_log.txt"
[20:15:39] g:         strncpy(shared_memory, formatted_message, MAX_MESSAGE_LENGTH);
[20:15:39] d: 
[20:15:39] d: 
[20:15:39] g:         semaphore_unlock(sem_id);
[20:15:39] d: // Semaphore operations
[20:15:39] d: // Semaphore operations
[20:15:39] g: 
[20:15:39] d: void semaphore_lock(int semid) {
[20:15:39] d: void semaphore_lock(int semid) {
[20:15:39] g:         // Clear shared memory after broadcasting
[20:15:39] d:     struct sembuf op = {0, -1, 0};
[20:15:39] d:     struct sembuf op = {0, -1, 0};
[20:15:39] g:         usleep(100000); // Give clients time to read
[20:15:39] d:     semop(semid, &op, 1);
[20:15:39] d:     semop(semid, &op, 1);
[20:15:39] g:         semaphore_lock(sem_id);
[20:15:39] d: }
[20:15:39] d: }
[20:15:39] g:         memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:40] d: 
[20:15:40] d: 
[20:15:40] g:         semaphore_unlock(sem_id);
[20:15:40] d: void semaphore_unlock(int semid) {
[20:15:40] g:     }
[20:15:40] g:     }
[20:15:40] d:     struct sembuf op = {0, 1, 0};
[20:15:40] g: 
[20:15:40] g: 
[20:15:40] d:     semop(semid, &op, 1);
[20:15:40] g:     // Cleanup
[20:15:40] g:     // Cleanup
[20:15:40] d: }
[20:15:40] g:     kill(pid, SIGKILL); // Terminate the child process
[20:15:40] g:     kill(pid, SIGKILL); // Terminate the child process
[20:15:40] d: 
[20:15:40] g:     cleanup_ncurses();
[20:15:40] g:     cleanup_ncurses();
[20:15:40] d: // Function to append messages to the chat log
[20:15:40] g:     shmdt(shared_memory);
[20:15:40] g:     shmdt(shared_memory);
[20:15:40] d: void save_message_to_file(const char *message) {
[20:15:40] g:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:40] g:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:40] d:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:15:40] g:     semctl(sem_id, 0, IPC_RMID);
[20:15:40] g:     semctl(sem_id, 0, IPC_RMID);
[20:15:40] d:     if (file == NULL) {
[20:15:40] g: 
[20:15:40] g: 
[20:15:41] d:         perror("Failed to open chat log file");
[20:15:41] g:     return 0;
[20:15:41] g:     return 0;
[20:15:41] d:         return;
[20:15:41] g: }
[20:15:41] g: }
[20:15:41] d:     }
[20:15:41] g: [B[B#include <stdio.h>
[20:15:41] g: [B[B#include <stdio.h>
[20:15:41] d:     fprintf(file, "%s\n", message);
[20:15:41] g: #include <stdlib.h>
[20:15:41] g: #include <stdlib.h>
[20:15:41] d:     fclose(file);
[20:15:41] g: #include <string.h>
[20:15:41] g: #include <string.h>
[20:15:41] d: }
[20:15:41] g: #include <unistd.h>
[20:15:41] g: #include <unistd.h>
[20:15:41] d: 
[20:15:41] g: #include <sys/ipc.h>
[20:15:41] g: #include <sys/ipc.h>
[20:15:41] d: // Function to load and display the chat log
[20:15:41] g: #include <sys/shm.h>
[20:15:41] g: #include <sys/shm.h>
[20:15:41] d: void load_chat_log() {
[20:15:41] g: #include <sys/sem.h>
[20:15:41] g: #include <sys/sem.h>
[20:15:41] d:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:41] g: #include <ncurses.h>
[20:15:41] g: #include <ncurses.h>
[20:15:42] d:     if (file == NULL) {
[20:15:42] g: #include <time.h>
[20:15:42] g: #include <time.h>
[20:15:42] d:         return; // No chat log yet
[20:15:42] g: #include <signal.h>
[20:15:42] g: #include <signal.h>
[20:15:42] d:     }
[20:15:42] g: 
[20:15:42] g: 
[20:15:42] d:     char line[MAX_MESSAGE_LENGTH];
[20:15:42] g: #define SHM_KEY 1234
[20:15:42] g: #define SHM_KEY 1234
[20:15:42] d:     while (fgets(line, sizeof(line), file)) {
[20:15:42] g: #define SEM_KEY 5678
[20:15:42] g: #define SEM_KEY 5678
[20:15:42] d:         printw("%s", line);
[20:15:42] g: #define MAX_MESSAGE_LENGTH 256
[20:15:42] g: #define MAX_MESSAGE_LENGTH 256
[20:15:42] d:     }
[20:15:42] g: #define CHAT_LOG_FILE "chat_log.txt"
[20:15:42] g: #define CHAT_LOG_FILE "chat_log.txt"
[20:15:42] d:     fclose(file);
[20:15:42] g: 
[20:15:42] g: 
[20:15:42] d: }
[20:15:42] g: // Semaphore operations
[20:15:42] g: // Semaphore operations
[20:15:42] d: 
[20:15:42] g: void semaphore_lock(int semid) {
[20:15:42] g: void semaphore_lock(int semid) {
[20:15:43] d: void init_ncurses() {
[20:15:43] g:     struct sembuf op = {0, -1, 0};
[20:15:43] g:     struct sembuf op = {0, -1, 0};
[20:15:43] d:     initscr();
[20:15:43] g:     semop(semid, &op, 1);
[20:15:43] g:     semop(semid, &op, 1);
[20:15:43] d:     cbreak();
[20:15:43] g: }
[20:15:43] g: }
[20:15:43] d:     noecho();
[20:15:43] g: 
[20:15:43] g: 
[20:15:43] d:     scrollok(stdscr, TRUE);
[20:15:43] g: void semaphore_unlock(int semid) {
[20:15:43] g: void semaphore_unlock(int semid) {
[20:15:43] d: }
[20:15:43] g:     struct sembuf op = {0, 1, 0};
[20:15:43] g:     struct sembuf op = {0, 1, 0};
[20:15:43] d: 
[20:15:43] g:     semop(semid, &op, 1);
[20:15:43] g:     semop(semid, &op, 1);
[20:15:43] d: void cleanup_ncurses() {
[20:15:43] g: }
[20:15:43] g: }
[20:15:43] d:     endwin();
[20:15:43] g: 
[20:15:43] g: 
[20:15:43] d: }
[20:15:43] g: // Function to append messages to the chat log
[20:15:43] g: // Function to append messages to the chat log
[20:15:44] d: 
[20:15:44] g: void save_message_to_file(const char *message) {
[20:15:44] g: void save_message_to_file(const char *message) {
[20:15:44] d: // Get a timestamp for each message
[20:15:44] g:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:15:44] g:     FILE *file = fopen(CHAT_LOG_FILE, "a");
[20:15:44] d: void get_timestamp(char *buffer, size_t size) {
[20:15:44] g:     if (file == NULL) {
[20:15:44] g:     if (file == NULL) {
[20:15:44] d:     time_t now = time(NULL);
[20:15:44] g:         perror("Failed to open chat log file");
[20:15:44] g:         perror("Failed to open chat log file");
[20:15:44] d:     struct tm *t = localtime(&now);
[20:15:44] g:         return;
[20:15:44] g:         return;
[20:15:44] d:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:44] g:     }
[20:15:44] g:     }
[20:15:44] d: }
[20:15:44] g:     fprintf(file, "%s\n", message);
[20:15:44] g:     fprintf(file, "%s\n", message);
[20:15:44] d: 
[20:15:44] g:     fclose(file);
[20:15:44] g:     fclose(file);
[20:15:44] d: // Process to handle live updates
[20:15:44] g: }
[20:15:44] g: }
[20:15:44] d: void live_update_process(int sem_id) {
[20:15:44] g: 
[20:15:44] g: 
[20:15:45] d:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:45] g: // Function to load and display the chat log
[20:15:45] g: // Function to load and display the chat log
[20:15:45] d:     if (shm_id < 0) {
[20:15:45] g: void load_chat_log() {
[20:15:45] g: void load_chat_log() {
[20:15:45] d:         perror("shmget failed in live_update_process");
[20:15:45] g:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:45] g:     FILE *file = fopen(CHAT_LOG_FILE, "r");
[20:15:45] d:         exit(EXIT_FAILURE);
[20:15:45] g:     if (file == NULL) {
[20:15:45] g:     if (file == NULL) {
[20:15:45] d:     }
[20:15:45] g:         return; // No chat log yet
[20:15:45] g:         return; // No chat log yet
[20:15:45] d: 
[20:15:45] g:     }
[20:15:45] g:     }
[20:15:45] d:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:45] g:     char line[MAX_MESSAGE_LENGTH];
[20:15:45] g:     char line[MAX_MESSAGE_LENGTH];
[20:15:45] d:     if (shared_memory == (char *)-1) {
[20:15:45] g:     while (fgets(line, sizeof(line), file)) {
[20:15:45] g:     while (fgets(line, sizeof(line), file)) {
[20:15:45] d:         perror("shmat failed in live_update_process");
[20:15:45] g:         printw("%s", line);
[20:15:45] g:         printw("%s", line);
[20:15:45] d:         exit(EXIT_FAILURE);
[20:15:45] g:     }
[20:15:45] g:     }
[20:15:46] d:     }
[20:15:46] g:     fclose(file);
[20:15:46] g:     fclose(file);
[20:15:46] d: 
[20:15:46] g: }
[20:15:46] g: }
[20:15:46] d:     while (1) {
[20:15:46] g: 
[20:15:46] g: 
[20:15:46] d:         semaphore_lock(sem_id);
[20:15:46] g: void init_ncurses() {
[20:15:46] g: void init_ncurses() {
[20:15:46] d:         if (strlen(shared_memory) > 0) {
[20:15:46] g:     initscr();
[20:15:46] g:     initscr();
[20:15:46] d:             // Display the message and clear shared memory
[20:15:46] g:     cbreak();
[20:15:46] g:     cbreak();
[20:15:46] d:             printw("%s\n", shared_memory);
[20:15:46] g:     noecho();
[20:15:46] g:     noecho();
[20:15:46] d:             save_message_to_file(shared_memory);
[20:15:46] g:     scrollok(stdscr, TRUE);
[20:15:46] g:     scrollok(stdscr, TRUE);
[20:15:46] d:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:46] g: }
[20:15:46] g: }
[20:15:46] d:             refresh();
[20:15:47] g: 
[20:15:47] g: 
[20:15:47] d:         }
[20:15:47] g: void cleanup_ncurses() {
[20:15:47] g: void cleanup_ncurses() {
[20:15:47] d:         semaphore_unlock(sem_id);
[20:15:47] g:     endwin();
[20:15:47] g:     endwin();
[20:15:47] d: 
[20:15:47] g: }
[20:15:47] g: }
[20:15:47] d:         usleep(100000); // Check every 100ms
[20:15:47] g: 
[20:15:47] g: 
[20:15:47] d:     }
[20:15:47] g: // Get a timestamp for each message
[20:15:47] g: // Get a timestamp for each message
[20:15:47] d: 
[20:15:47] g: void get_timestamp(char *buffer, size_t size) {
[20:15:47] g: void get_timestamp(char *buffer, size_t size) {
[20:15:47] d:     shmdt(shared_memory);
[20:15:47] g:     time_t now = time(NULL);
[20:15:47] g:     time_t now = time(NULL);
[20:15:47] d:     exit(EXIT_SUCCESS);
[20:15:47] g:     struct tm *t = localtime(&now);
[20:15:47] g:     struct tm *t = localtime(&now);
[20:15:47] d: }
[20:15:47] g:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:47] g:     strftime(buffer, size, "[%H:%M:%S]", t);
[20:15:47] d: 
[20:15:48] g: }
[20:15:48] g: }
[20:15:48] d: int main() {
[20:15:48] g: 
[20:15:48] g: 
[20:15:48] d:     int shm_id, sem_id;
[20:15:48] g: // Process to handle live updates
[20:15:48] g: // Process to handle live updates
[20:15:48] d:     char *shared_memory;
[20:15:48] g: void live_update_process(int sem_id) {
[20:15:48] g: void live_update_process(int sem_id) {
[20:15:48] d:     char username[50];
[20:15:48] g:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:48] g:     int shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, 0666);
[20:15:48] d: 
[20:15:48] g:     if (shm_id < 0) {
[20:15:48] g:     if (shm_id < 0) {
[20:15:48] d:     // Initialize shared memory
[20:15:48] g:         perror("shmget failed in live_update_process");
[20:15:48] g:         perror("shmget failed in live_update_process");
[20:15:48] d:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:48] g:         exit(EXIT_FAILURE);
[20:15:48] g:         exit(EXIT_FAILURE);
[20:15:48] d:     if (shm_id < 0) {
[20:15:48] g:     }
[20:15:48] g:     }
[20:15:48] d:         perror("shmget failed");
[20:15:48] g: 
[20:15:48] g: 
[20:15:48] d:         exit(EXIT_FAILURE);
[20:15:49] g:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:49] g:     char *shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:49] d:     }
[20:15:49] g:     if (shared_memory == (char *)-1) {
[20:15:49] g:     if (shared_memory == (char *)-1) {
[20:15:49] d: 
[20:15:49] g:         perror("shmat failed in live_update_process");
[20:15:49] g:         perror("shmat failed in live_update_process");
[20:15:49] d:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:49] g:         exit(EXIT_FAILURE);
[20:15:49] g:         exit(EXIT_FAILURE);
[20:15:49] d:     if (shared_memory == (char *)-1) {
[20:15:49] g:     }
[20:15:49] g:     }
[20:15:49] d:         perror("shmat failed");
[20:15:49] g: 
[20:15:49] g: 
[20:15:49] d:         exit(EXIT_FAILURE);
[20:15:49] g:     while (1) {
[20:15:49] g:     while (1) {
[20:15:49] d:     }
[20:15:49] g:         semaphore_lock(sem_id);
[20:15:49] g:         semaphore_lock(sem_id);
[20:15:49] d: 
[20:15:49] g:         if (strlen(shared_memory) > 0) {
[20:15:49] g:         if (strlen(shared_memory) > 0) {
[20:15:49] d:     // Initialize semaphore
[20:15:49] g:             // Display the message and clear shared memory
[20:15:49] g:             // Display the message and clear shared memory
[20:15:49] d:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:50] g:             printw("%s\n", shared_memory);
[20:15:50] g:             printw("%s\n", shared_memory);
[20:15:50] d:     if (sem_id < 0) {
[20:15:50] g:             save_message_to_file(shared_memory);
[20:15:50] g:             save_message_to_file(shared_memory);
[20:15:50] d:         perror("semget failed");
[20:15:50] g:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:50] g:             memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:50] d:         exit(EXIT_FAILURE);
[20:15:50] g:             refresh();
[20:15:50] g:             refresh();
[20:15:50] d:     }
[20:15:50] g:         }
[20:15:50] g:         }
[20:15:50] d: 
[20:15:50] g:         semaphore_unlock(sem_id);
[20:15:50] g:         semaphore_unlock(sem_id);
[20:15:50] d:     // Initialize semaphore value to 1 (unlocked)
[20:15:50] g: 
[20:15:50] g: 
[20:15:50] d:     semctl(sem_id, 0, SETVAL, 1);
[20:15:50] g:         usleep(100000); // Check every 100ms
[20:15:50] g:         usleep(100000); // Check every 100ms
[20:15:50] d: 
[20:15:50] g:     }
[20:15:50] g:     }
[20:15:50] d:     // Initialize ncurses
[20:15:50] g: 
[20:15:50] g: 
[20:15:50] d:     init_ncurses();
[20:15:51] g:     shmdt(shared_memory);
[20:15:51] g:     shmdt(shared_memory);
[20:15:51] d: 
[20:15:51] g:     exit(EXIT_SUCCESS);
[20:15:51] g:     exit(EXIT_SUCCESS);
[20:15:51] d:     // Prompt for username
[20:15:51] g: }
[20:15:51] g: }
[20:15:51] d:     mvprintw(0, 0, "Enter your username: ");
[20:15:51] g: 
[20:15:51] g: 
[20:15:51] d:     echo();
[20:15:51] g: int main() {
[20:15:51] g: int main() {
[20:15:51] d:     getnstr(username, sizeof(username));
[20:15:51] g:     int shm_id, sem_id;
[20:15:51] g:     int shm_id, sem_id;
[20:15:51] d:     noecho();
[20:15:51] g:     char *shared_memory;
[20:15:51] g:     char *shared_memory;
[20:15:51] d: 
[20:15:51] g:     char username[50];
[20:15:51] g:     char username[50];
[20:15:51] d:     // Load chat history
[20:15:51] g: 
[20:15:51] g: 
[20:15:51] d:     load_chat_log();
[20:15:51] g:     // Initialize shared memory
[20:15:51] g:     // Initialize shared memory
[20:15:51] d:     refresh();
[20:15:52] g:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:52] g:     shm_id = shmget(SHM_KEY, MAX_MESSAGE_LENGTH, IPC_CREAT | 0666);
[20:15:52] d: 
[20:15:52] g:     if (shm_id < 0) {
[20:15:52] g:     if (shm_id < 0) {
[20:15:52] d:     // Fork to handle live updates
[20:15:52] g:         perror("shmget failed");
[20:15:52] g:         perror("shmget failed");
[20:15:52] d:     pid_t pid = fork();
[20:15:52] g:         exit(EXIT_FAILURE);
[20:15:52] g:         exit(EXIT_FAILURE);
[20:15:52] d:     if (pid == 0) {
[20:15:52] g:     }
[20:15:52] g:     }
[20:15:52] d:         live_update_process(sem_id);
[20:15:52] g: 
[20:15:52] g: 
[20:15:52] d:     }
[20:15:52] g:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:52] g:     shared_memory = (char *)shmat(shm_id, NULL, 0);
[20:15:52] d: 
[20:15:52] g:     if (shared_memory == (char *)-1) {
[20:15:52] g:     if (shared_memory == (char *)-1) {
[20:15:52] d:     char input[MAX_MESSAGE_LENGTH];
[20:15:52] g:         perror("shmat failed");
[20:15:52] g:         perror("shmat failed");
[20:15:52] d:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:52] g:         exit(EXIT_FAILURE);
[20:15:52] g:         exit(EXIT_FAILURE);
[20:15:53] d: 
[20:15:53] g:     }
[20:15:53] g:     }
[20:15:53] d:     while (1) {
[20:15:53] g: 
[20:15:53] g: 
[20:15:53] d:         // Get user input
[20:15:53] g:     // Initialize semaphore
[20:15:53] g:     // Initialize semaphore
[20:15:53] d:         mvprintw(LINES - 2, 0, "> ");
[20:15:53] g:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:53] g:     sem_id = semget(SEM_KEY, 1, IPC_CREAT | 0666);
[20:15:53] d:         clrtoeol();
[20:15:53] g:     if (sem_id < 0) {
[20:15:53] g:     if (sem_id < 0) {
[20:15:53] d:         echo();
[20:15:53] g:         perror("semget failed");
[20:15:53] g:         perror("semget failed");
[20:15:53] d:         getnstr(input, MAX_MESSAGE_LENGTH);
[20:15:53] g:         exit(EXIT_FAILURE);
[20:15:53] g:         exit(EXIT_FAILURE);
[20:15:53] d:         noecho();
[20:15:53] g:     }
[20:15:53] g:     }
[20:15:53] d: 
[20:15:53] g: 
[20:15:53] g: 
[20:15:53] d:         if (strcmp(input, "/quit") == 0) {
[20:15:53] g:     // Initialize semaphore value to 1 (unlocked)
[20:15:53] g:     // Initialize semaphore value to 1 (unlocked)
[20:15:54] d:             break;
[20:15:54] g:     semctl(sem_id, 0, SETVAL, 1);
[20:15:54] g:     semctl(sem_id, 0, SETVAL, 1);
[20:15:54] d:         }
[20:15:54] g: 
[20:15:54] g: 
[20:15:54] d: 
[20:15:54] g:     // Initialize ncurses
[20:15:54] g:     // Initialize ncurses
[20:15:54] d:         // Add timestamp and username to the message
[20:15:54] g:     init_ncurses();
[20:15:54] g:     init_ncurses();
[20:15:54] d:         char timestamp[20];
[20:15:54] g: 
[20:15:54] g: 
[20:15:54] d:         get_timestamp(timestamp, sizeof(timestamp));
[20:15:54] g:     // Prompt for username
[20:15:54] g:     // Prompt for username
[20:15:54] d:         snprintf(formatted_message, sizeof(formatted_message), "%s %s: %s", timestamp, username, input);
[20:15:54] g:     mvprintw(0, 0, "Enter your username: ");
[20:15:54] g:     mvprintw(0, 0, "Enter your username: ");
[20:15:54] d: 
[20:15:54] g:     echo();
[20:15:54] g:     echo();
[20:15:54] d:         // Save and display message
[20:15:54] g:     getnstr(username, sizeof(username));
[20:15:54] g:     getnstr(username, sizeof(username));
[20:15:54] d:         save_message_to_file(formatted_message);
[20:15:54] g:     noecho();
[20:15:54] g:     noecho();
[20:15:55] d:         semaphore_lock(sem_id);
[20:15:55] g: 
[20:15:55] g: 
[20:15:55] d:         strncpy(shared_memory, formatted_message, MAX_MESSAGE_LENGTH);
[20:15:55] g:     // Load chat history
[20:15:55] g:     // Load chat history
[20:15:55] d:         semaphore_unlock(sem_id);
[20:15:55] g:     load_chat_log();
[20:15:55] g:     load_chat_log();
[20:15:55] d: 
[20:15:55] g:     refresh();
[20:15:55] g:     refresh();
[20:15:55] d:         // Clear shared memory after broadcasting
[20:15:55] g: 
[20:15:55] g: 
[20:15:55] d:         usleep(100000); // Give clients time to read
[20:15:55] g:     // Fork to handle live updates
[20:15:55] g:     // Fork to handle live updates
[20:15:55] d:         semaphore_lock(sem_id);
[20:15:55] g:     pid_t pid = fork();
[20:15:55] g:     pid_t pid = fork();
[20:15:55] d:         memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:55] g:     if (pid == 0) {
[20:15:55] g:     if (pid == 0) {
[20:15:55] d:         semaphore_unlock(sem_id);
[20:15:55] g:         live_update_process(sem_id);
[20:15:55] g:         live_update_process(sem_id);
[20:15:55] d:     }
[20:15:55] g:     }
[20:15:55] g:     }
[20:15:56] d: 
[20:15:56] g: 
[20:15:56] g: 
[20:15:56] d:     // Cleanup
[20:15:56] g:     char input[MAX_MESSAGE_LENGTH];
[20:15:56] g:     char input[MAX_MESSAGE_LENGTH];
[20:15:56] d:     kill(pid, SIGKILL); // Terminate the child process
[20:15:56] g:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:56] g:     char formatted_message[MAX_MESSAGE_LENGTH + 50]; // For timestamp + username
[20:15:56] d:     cleanup_ncurses();
[20:15:56] g: 
[20:15:56] g: 
[20:15:56] d:     shmdt(shared_memory);
[20:15:56] g:     while (1) {
[20:15:56] g:     while (1) {
[20:15:56] d:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:56] g:         // Get user input
[20:15:56] g:         // Get user input
[20:15:56] d:     semctl(sem_id, 0, IPC_RMID);
[20:15:56] g:         mvprintw(LINES - 2, 0, "> ");
[20:15:56] g:         mvprintw(LINES - 2, 0, "> ");
[20:15:56] d: 
[20:15:56] g:         clrtoeol();
[20:15:56] g:         clrtoeol();
[20:15:56] d:     return 0;
[20:15:56] g:         echo();
[20:15:56] g:         echo();
[20:15:56] d: }
[20:15:56] g:         getnstr(input, MAX_MESSAGE_LENGTH);
[20:15:56] g:         getnstr(input, MAX_MESSAGE_LENGTH);
[20:15:57] g:         noecho();
[20:15:57] g:         noecho();
[20:15:57] g: 
[20:15:57] g: 
[20:15:57] g:         if (strcmp(input, "/quit") == 0) {
[20:15:57] g:         if (strcmp(input, "/quit") == 0) {
[20:15:57] g:             break;
[20:15:57] g:             break;
[20:15:57] g:         }
[20:15:57] g:         }
[20:15:57] g: 
[20:15:57] g: 
[20:15:57] g:         // Add timestamp and username to the message
[20:15:57] g:         // Add timestamp and username to the message
[20:15:57] g:         char timestamp[20];
[20:15:57] g:         char timestamp[20];
[20:15:57] g:         get_timestamp(timestamp, sizeof(timestamp));
[20:15:57] g:         get_timestamp(timestamp, sizeof(timestamp));
[20:15:57] g:         snprintf(formatted_message, sizeof(formatted_message), "%s %s: %s", timestamp, username, input);
[20:15:57] g:         snprintf(formatted_message, sizeof(formatted_message), "%s %s: %s", timestamp, username, input);
[20:15:58] g: 
[20:15:58] g: 
[20:15:58] g:         // Save and display message
[20:15:58] g:         // Save and display message
[20:15:58] g:         save_message_to_file(formatted_message);
[20:15:58] g:         save_message_to_file(formatted_message);
[20:15:58] g:         semaphore_lock(sem_id);
[20:15:58] g:         semaphore_lock(sem_id);
[20:15:58] g:         strncpy(shared_memory, formatted_message, MAX_MESSAGE_LENGTH);
[20:15:58] g:         strncpy(shared_memory, formatted_message, MAX_MESSAGE_LENGTH);
[20:15:58] g:         semaphore_unlock(sem_id);
[20:15:58] g:         semaphore_unlock(sem_id);
[20:15:58] g: 
[20:15:58] g: 
[20:15:58] g:         // Clear shared memory after broadcasting
[20:15:58] g:         // Clear shared memory after broadcasting
[20:15:58] g:         usleep(100000); // Give clients time to read
[20:15:58] g:         usleep(100000); // Give clients time to read
[20:15:58] g:         semaphore_lock(sem_id);
[20:15:58] g:         semaphore_lock(sem_id);
[20:15:59] g:         memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:59] g:         memset(shared_memory, 0, MAX_MESSAGE_LENGTH);
[20:15:59] g:         semaphore_unlock(sem_id);
[20:15:59] g:         semaphore_unlock(sem_id);
[20:15:59] g:     }
[20:15:59] g:     }
[20:15:59] g: 
[20:15:59] g: 
[20:15:59] g:     // Cleanup
[20:15:59] g:     // Cleanup
[20:15:59] g:     kill(pid, SIGKILL); // Terminate the child process
[20:15:59] g:     kill(pid, SIGKILL); // Terminate the child process
[20:15:59] g:     cleanup_ncurses();
[20:15:59] g:     cleanup_ncurses();
[20:15:59] g:     shmdt(shared_memory);
[20:15:59] g:     shmdt(shared_memory);
[20:15:59] g:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:59] g:     shmctl(shm_id, IPC_RMID, NULL);
[20:15:59] g:     semctl(sem_id, 0, IPC_RMID);
[20:15:59] g:     semctl(sem_id, 0, IPC_RMID);
[20:16:00] g: 
[20:16:00] g: 
[20:16:00] g:     return 0;
[20:16:00] g:     return 0;
[20:16:00] g: }
[20:16:00] g: }
